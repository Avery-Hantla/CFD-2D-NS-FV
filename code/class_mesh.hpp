#ifndef CLASS_MESH_HPP
  #define CLASS_MESH_HPP
  #include <vector>

  class class_mesh {
    public:
      std::vector<double> x; // x1, x2, x3, ...
      std::vector<double> y; // y1, y2, y3, ...
          
      std::vector<int> face_point1; // f1p1, f2p1, ...
      std::vector<int> face_point2; // f1p2, f2p2, ...

      std::vector<int> face_cell1; // f1c1, f2c1, ...
      std::vector<int> face_cell2; // f1c2, f2c2, ...

      std::vector<double> face_area; // f1a, f2a, f3a, ...
      
      std::vector<double> face_nx; // f1nx, f2nx, f3nx, ...
      std::vector<double> face_ny; // f1ny, f2ny, f3ny, ...

      std::vector<double> face_cell1_dx; //f1rx, f2rx, ...
      std::vector<double> face_cell2_dx; //f1rx, f2rx, ...
      std::vector<double> face_cell1_dy; //f1ry, f2ry, ...
      std::vector<double> face_cell2_dy; //f1ry, f2ry, ...

      std::vector<double> face_centerx; // f1x, f2x, f3x, ...
      std::vector<double> face_centery; // f1y, f2y, f3y, ...

      std::vector<double> cell_vol; // c1v, c2v, c3v, ...
      std::vector<double> cell_centerx; // c1x, c2x, c3x, ...
      std::vector<double> cell_centery; // c1y, c2y, c3y, ...


      std::vector<int> cell_faces; // c1f1, c1f2, c1f3, c1f4, ..., c2f1, c2f2, c2f3, c2f4, ... if no face 4, 5, or 6 = -2 
      std::vector<int> cell_face_count; // c1fc, c2fc, c3fc, ...

      // 2nd Order Variables
      int num_of_BC;
      std::vector<double> BC_faces;
      std::vector<double> face2BCf;
      std::vector<double> BC_cell_centerx;
      std::vector<double> BC_cell_centery;

      std::vector<double> Ixx;
      std::vector<double> Iyy;
      std::vector<double> Ixy;

      std::vector<double> face_dxj; //f1rx, f2rx, ...
      std::vector<double> face_dyj; //f1ry, f2ry, ...

      std::vector<double> delta;

      // Conectivity Matrix for Tecplot and CGNS Outputs
      std::vector<double> connect_out;


      // NS 


      int find_cell_face(int cell_num, int cell_face) {
        return cell_faces[cell_num*6 + cell_face];
      }
  };
#endif